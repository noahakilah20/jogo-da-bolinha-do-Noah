<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <title>Jogo da Aninha - Arkanoid ðŸ’–</title>
  <style>
    body {
      margin: 0;
      background-color: #111;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      overflow: hidden;
    }
    canvas {
      background-color: #222;
      border: 2px solid #fff;
    }
  </style>
</head>
<body>
<canvas id="gameCanvas" width="400" height="600"></canvas>
<script>
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

let faseAtual = 1;
let score = 0;
let lives = 3;
let gameStarted = false;

const arrowImg = new Image();
arrowImg.src = "data:image/svg+xml,%3Csvg viewBox='0 0 24 24' fill='white' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M4 12l1.41 1.41L11 7.83v12.34h2V7.83l5.59 5.58L20 12l-8-8-8 8z'/%3E%3C/svg%3E";

const paddle = {
  x: canvas.width / 2 - 40,
  y: canvas.height - 30,
  width: 80,
  height: 10,
  dx: 0
};

let balls = [createBall(2)];

function createBall(speed) {
  return {
    x: canvas.width / 2,
    y: paddle.y - 10,
    radius: 6,
    dx: speed,
    dy: -speed
  };
}

let bricks = [];
function createBricks() {
  bricks = [];
  const rows = faseAtual + 2;
  const cols = 8;
  const width = 40;
  const height = 15;
  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      bricks.push({
        x: c * (width + 5) + 10,
        y: r * (height + 5) + 40,
        width,
        height,
        hits: 0,
        destroyed: false
      });
    }
  }
}
createBricks();

function drawPaddle() {
  ctx.fillStyle = "#0ff";
  ctx.fillRect(paddle.x, paddle.y, paddle.width, paddle.height);
}

function drawBall(ball) {
  ctx.beginPath();
  ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
  ctx.fillStyle = "#fff";
  ctx.fill();
  ctx.closePath();
}

function drawBricks() {
  bricks.forEach(brick => {
    if (!brick.destroyed) {
      ctx.fillStyle = `rgb(${100 + brick.hits * 50}, 0, 200)`;
      ctx.fillRect(brick.x, brick.y, brick.width, brick.height);
    }
  });
}

function drawScore() {
  ctx.fillStyle = "#fff";
  ctx.font = "16px Arial";
  ctx.fillText("Pontos: " + score, 10, 20);
  ctx.fillText("Vidas: " + lives, 320, 20);
  ctx.fillText("Fase: " + faseAtual, 170, 20);
}

function drawArrow() {
  ctx.drawImage(arrowImg, paddle.x + paddle.width / 2 - 12, paddle.y - 40, 24, 24);
  ctx.fillStyle = "#fff";
  ctx.font = "14px Arial";
  ctx.fillText("Toque para comeÃ§ar", 120, paddle.y - 10);
}

function updateGame() {
  if (!gameStarted) return;

  balls.forEach(ball => {
    ball.x += ball.dx;
    ball.y += ball.dy;

    if (ball.x < ball.radius || ball.x > canvas.width - ball.radius) ball.dx *= -1;
    if (ball.y < ball.radius) ball.dy *= -1;

    if (
      ball.y + ball.radius > paddle.y &&
      ball.x > paddle.x && ball.x < paddle.x + paddle.width
    ) {
      ball.dy *= -1;
    }

    bricks.forEach(brick => {
      if (!brick.destroyed &&
        ball.x > brick.x && ball.x < brick.x + brick.width &&
        ball.y > brick.y && ball.y < brick.y + brick.height) {

        ball.dy *= -1;
        brick.hits++;
        score += 5;

        if (brick.hits === 3) {
          brick.destroyed = true;
          score += 15;
          balls.push(createBall(getSpeedByFase()));
        }
      }
    });

    if (ball.y > canvas.height) {
      balls = balls.filter(b => b !== ball);
      if (balls.length === 0) {
        lives--;
        if (lives > 0) {
          balls.push(createBall(getSpeedByFase()));
        } else {
          gameStarted = false;
          score = 0;
          lives = 3;
          faseAtual = 1;
          createBricks();
          balls = [createBall(getSpeedByFase())];
        }
      }
    }
  });

  // AvanÃ§a de fase por pontuaÃ§Ã£o
  if (score >= 300 && faseAtual === 1) {
    faseAtual = 2;
    adjustGameToFase();
  } else if (score >= 600 && faseAtual === 2) {
    faseAtual = 3;
    adjustGameToFase();
  }
}

function adjustGameToFase() {
  createBricks();
  balls.forEach(ball => {
    let speed = getSpeedByFase();
    ball.dx = Math.sign(ball.dx) * speed;
    ball.dy = Math.sign(ball.dy) * speed;
  });
}

function getSpeedByFase() {
  if (faseAtual === 1) return 2;
  if (faseAtual === 2) return 3.5;
  return 5;
}

function draw() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawBricks();
  drawPaddle();
  balls.forEach(drawBall);
  drawScore();
  if (!gameStarted) drawArrow();
}

function gameLoop() {
  updateGame();
  draw();
  requestAnimationFrame(gameLoop);
}

gameLoop();

// Movimento fluido
canvas.addEventListener("mousemove", e => {
  const rect = canvas.getBoundingClientRect();
  const x = e.clientX - rect.left;
  paddle.x = x - paddle.width / 2;
});

canvas.addEventListener("touchmove", e => {
  const rect = canvas.getBoundingClientRect();
  const x = e.touches[0].clientX - rect.left;
  paddle.x = x - paddle.width / 2;
  e.preventDefault();
}, { passive: false });

canvas.addEventListener("click", () => {
  if (!gameStarted) {
    gameStarted = true;
  }
});
canvas.addEventListener("touchstart", () => {
  if (!gameStarted) {
    gameStarted = true;
  }
});
</script>
</body>
</html>
