<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <title>Jogo da Bolinha do Noah ðŸŽ®</title>
  <style>
    * { box-sizing: border-box; }
    body, html {
      margin: 0;
      padding: 0;
      background: #111;
      overflow: hidden;
      font-family: Arial, sans-serif;
      color: #fff;
    }
    canvas {
      display: block;
      margin: auto;
      background: #222;
    }
    #overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      background: rgba(0,0,0,0.7);
      flex-direction: column;
    }
    button {
      margin-top: 10px;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div id="overlay">
    <h1>Jogo da Bolinha do Noah ðŸŽ®</h1>
    <input id="playerName" placeholder="Digite seu nome" style="padding:8px; font-size:16px;" />
    <button onclick="startGame()">Iniciar</button>
  </div>
  <canvas id="gameCanvas" width="800" height="600"></canvas>

  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    let balls = [], bricks = [], score = 0, lives = 3, level = 1, player = "";
    let paddle, isGameOver = false;

    function startGame() {
      player = document.getElementById('playerName').value || "Jogador";
      document.getElementById('overlay').style.display = 'none';
      initGame();
    }

    function initGame() {
      balls = [{ x: 400, y: 300, dx: 2, dy: -2, radius: 8 }];
      paddle = { x: 350, y: 580, width: 100, height: 10 };
      score = 0;
      lives = 3;
      level = 1;
      isGameOver = false;
      generateBricks();
      requestAnimationFrame(draw);
    }

    function generateBricks() {
      bricks = [];
      const rows = level + 2;
      const cols = 8;
      for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols; c++) {
          bricks.push({
            x: 100 + c * 75,
            y: 50 + r * 30,
            width: 60,
            height: 20,
            destroyed: false
          });
        }
      }
    }

    function drawBricks() {
      for (let b of bricks) {
        if (!b.destroyed) {
          ctx.fillStyle = "#0ff";
          ctx.fillRect(b.x, b.y, b.width, b.height);
        }
      }
    }

    function drawPaddle() {
      ctx.fillStyle = "#fff";
      ctx.fillRect(paddle.x, paddle.y, paddle.width, paddle.height);
    }

    function drawBalls() {
      ctx.fillStyle = "#f00";
      for (let ball of balls) {
        ctx.beginPath();
        ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    function drawHUD() {
      ctx.fillStyle = "#fff";
      ctx.fillText(`Nome: ${player}`, 10, 20);
      ctx.fillText(`Score: ${score}`, 10, 40);
      ctx.fillText(`Vidas: ${lives}`, 10, 60);
      ctx.fillText(`Fase: ${level}`, 10, 80);
    }

    function collisionDetection() {
      for (let ball of balls) {
        for (let b of bricks) {
          if (!b.destroyed &&
            ball.x > b.x && ball.x < b.x + b.width &&
            ball.y > b.y && ball.y < b.y + b.height) {
              ball.dy = -ball.dy;
              b.destroyed = true;
              score += 10;
              if (Math.random() < 0.2) {
                balls.push({ x: ball.x, y: ball.y, dx: -ball.dx, dy: ball.dy, radius: 8 });
              }
          }
        }
      }
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawBricks();
      drawPaddle();
      drawBalls();
      drawHUD();
      collisionDetection();

      for (let ball of balls) {
        ball.x += ball.dx * (1 + level * 0.3);
        ball.y += ball.dy * (1 + level * 0.3);

        if (ball.x + ball.radius > canvas.width || ball.x - ball.radius < 0) ball.dx *= -1;
        if (ball.y - ball.radius < 0) ball.dy *= -1;

        if (ball.y + ball.radius > paddle.y &&
            ball.x > paddle.x && ball.x < paddle.x + paddle.width) {
          ball.dy *= -1;
        }

        if (ball.y - ball.radius > canvas.height) {
          balls.splice(balls.indexOf(ball), 1);
        }
      }

      if (balls.length === 0) {
        lives--;
        if (lives > 0) {
          balls.push({ x: 400, y: 300, dx: 2, dy: -2, radius: 8 });
        } else {
          isGameOver = true;
        }
      }

      if (!bricks.some(b => !b.destroyed)) {
        level++;
        if (level <= 3) {
          generateBricks();
          balls = [{ x: 400, y: 300, dx: 2, dy: -2, radius: 8 }];
        } else {
          isGameOver = true;
        }
      }

      if (!isGameOver) {
        requestAnimationFrame(draw);
      } else {
        showGameOver();
      }
    }

    function showGameOver() {
      ctx.fillStyle = "#000";
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = "#fff";
      ctx.font = "30px Arial";
      ctx.fillText("Game Over", 320, 300);
      ctx.fillText(`PontuaÃ§Ã£o: ${score}`, 320, 340);
    }

    document.addEventListener('mousemove', e => {
      let rect = canvas.getBoundingClientRect();
      paddle.x = e.clientX - rect.left - paddle.width / 2;
    });

    document.addEventListener('touchmove', e => {
      let rect = canvas.getBoundingClientRect();
      paddle.x = e.touches[0].clientX - rect.left - paddle.width / 2;
    });
  </script>
</body>
</html>
